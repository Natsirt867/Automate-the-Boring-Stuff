1. Which of the following are operators, and which are values?
    *
    'hello'
    -88.8
    -
    /
    +
    5

Answer:
    Operators are [*, -, /, +]
    Values are ['hello', -88.8, 5]

2. Which of the following is a variable, and which is a string?
    spam
    'spam'

Answer:
    spam is a variable and 'spam' is a string

3. Name three data types. (introduced in this chapter)

Answer:
    Integers, Floating-point numbers, Strings

4. What is an expression made up of? What do all expressions do?

Answer:
    An expression is made up of values and operators, it can evaluate the values and operators down to a single value.

5. This chapter introduced assignment statements, like spam = 10. What is the difference between an expression and a statement?

Answer:
    A statement is a declaration of a variables value, assigning a value to a variable. ex.) apples = 5
    An expression is a combination of values, variables and operators that can evaluate to a single value.
    The difference is a statement initializes/assigns or overwrites a value to a variable whereas an expression evaluates.

6. What does the variable bacon contain after the following code runs?
    bacon = 20
    bacon + 1

Answer:
    The variable bacon contains the value 20 after code execution. The expression bacon + 1 outputs 21 but the variables value
    stays the same.

7. What should the following two expressions evaluate to?
    'spam' + 'spamspam'
    'spam' * 3

Answer:
    The first expression should evaluate to spamspamspam
    The second expression should evaluate to spamspamspam

8. Why is eggs a valid variable name while 100 is invalid?

Answer:
    eggs is a string of characters while 100 is a literal integer value and variable names cannot begin with numbers. I believe the reason is the parser could not differentiate the integer value 100 from a variable name versus _100 which cannot be an integer value with an underscore.

9. What three functions can be used to get the integer, floating-point number, or string version of a value?

Answer:
    int(), float(), str()

10. Why does this expression cause an error? How can you fix it?
    'I have eaten ' + 99 + ' burritos.'

Answer:
    This expression causes an error because you cannot concatenate strings and literal integer values together (ex. (1 + apple) is not a valid expression *in python). Python tends to avoid implicit type conversions and would rather you explicitly define the type conversion. To fix this you would do as follows:

    'I have eaten ' + str(99) + ' burritos.'

